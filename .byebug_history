c
self.public_methods.include?(method_name)
self.public_methods
self.public_method
method_name.to_s
method_name
c
eixt
c
self.public_methods.include?(method_name)
self.public_methods
self.public_method
self
method_name
c
get[choice]
ap get
get
c
choice.strip!
choice.strip
choice
c
choice.strip
choice
c
choice
c
get.map{|k,v| k}
ap get
get
ap get
get
link_title.each.with_index {|x,i| get[x] = link_meet[i] }
link_title.each.with_index {|x| get[x] = link_meet[x] }
get = {}
link_title
ap get
get
link_meet.each.with_index {|x,i| get[x] = link_title[i] }
link_meet
link.meet
get = Hash.new
get = Hash.ew
link_meet
link_title
link_titl
ap [link_meet, link_title] 
ap Hash[link_meet, link_title]
Hash[link_meet, link_title]
[link_meet, link_title]
[link_meet, link_title].transpose
[link_meet, link_title]
link_title.count
link_meet.count
link_title = links.links.map{|x| x.to_s.strip[/Pertemuan.\d+/]}.compact
link_meet = links.links.map{|x| x.uri.to_s[/\w+.+course\/section\/\d+/]}.compact
links = self.mechanize.get link
link_title = links.link.map{|x| x.to_s.strip[/Pertemuan.\d+/]}.compact
link_meet = links.links.map{|x| x.uri.to_s[/\w+.+course\/section\/\d+/]}.compact!
ap links.links.map{|x| x.to_s.strip[/Pertemuan.\d+/]  }.compact
ap links.links.map{|x| x.to_s.strip[/Pertemuan.\d/]  }.compact
ap links.links.map{|x| x.to_s.strip[/Pertemuan./]  }.compact
ap links.links.map{|x| x.to_s.strip[/Pertemuan\d/]  }.compact
ap links.links.map{|x| x.to_s.strip[/Pertemuan/]  }.compact
ap links.links.map{|x| x.to_s.strip.match("Pertemuan")  }.compact
ap links.links.map{|x| x.to_s.strip.match("Pertemuan")  }
ap links.links.map{|x| x.to_s.strip.match("Pertemuan")  }.compact!
ap links.links.map{|x| x.to_s.strip.match("Pertemuan")  } 
ap links.links.map{|x| x.to_s.strip.match(/"Pertemuan"/)  } 
ap links.links.map{|x| x.to_s.strip[/"Pertemuan"/]  } 
ap links.links.map{|x| x.to_s.strip[/[A-Za-z]+.+ /]  } 
ap links.links.map{|x| x.to_s.strip[/[A-Za-z]+ /]  } 
ap links.links.map{|x| x.to_s.strip[/[A-Za-z]+\s /]  } 
ap links.links.map{|x| x.to_s.strip[/[A-Za-z]+.\d /]  } 
ap links.links.map{|x| x.to_s.strip[/[A-Za-z]+. /]  } 
ap links.links.map{|x| x.to_s.strip[/[A-Za-z]+\d /]  } 
ap links.links.map{|x| x.to_s.strip[/[A-Za-z]+\d+ /]  } 
ap links.links.map{|x| x.to_s.strip[/[A-Za-z]+ /]  } 
ap links.links.map{|x| x.to_s.strip[/[A-Za-z[+]]/]  } 
ap links.links.map{|x| x.to_s.strip[0]  } 
ap links.links.map{|x| x.to_s.strip[]  } 
ap links.links.map{|x| x.to_s.strip  } 
ap links.links.map{|x| x.to_s.strip ] } 
ap links.links.map{|x| x.to_s.strip] } 
ap links.links.map{|x| x.to_s.strip } 
ap links.links.map{|x| x.to_s } 
ap links.links.map{|x| x.to_s[/] } 
ap links.links.map{|x| x.to_s[/'Pertemuan'/] } 
ap links.links.map{|x| x.to_s[/['Pertemuan']/] } 
ap links.links.map{|x| x.to_s[/[Pertemuan]/] } 
ap links.links.map{|x| x.to_s[/'Pertemuan'/] } 
ap links.links.map{|x| x.to_s[/'Pertemuan/] } 
ap links.links.map{|x| x.to_s } 
ap links.links.map{|x| x.to_s.strip.strip } 
ap links.links.map{|x| x.to_s.strip } 
ap links.links.map{|x| x.to_s } 
ap links.links.map{|x| x.to_s.strip }
links.links.map{|x| x.to_s.strip }
links.links.map{|x| x.to_s}
links.links
links.links.map{|x| x.to_s }
links.links.map{|x| x.to_s }.compact!
links.links.map{|x| x.uri.to_s[/\w+.+course\/section\/\d+/]}.compact!
links.links.map{|x| x.uri.to_s[/\w+.+course\/section\/\d+/]}
links.links
links
c
links.linksc
links.links.map!{|x| x.uri.to_s[/\w+.+course\/section\/\d+/]}.to_s 
links.links.map!{|x| x.uri.to_s[/\w+.+course\/section\/\d+/]} 
links.links.map!{|x| x.uri.to_s[/\w+.+course\/section\/\d+/]}.compact!
links.links.map!{|x| x.uri.to_s[/\w+.+course\/section\/\d+/]}
links.links
links
c
ap links.map!{|x| x.uri.to_s[/\w+.+course\/section\/\d+/] }.compact
ap links.map{|x| x.uri.to_s[/\w+.+course\/section\/\d+/] }.compact
ap links.map{|x| x.uri.to_s[/\w+.+course\/section\/\d/] }.compact
ap links.map{|x| x.uri.to_s[/\w+.+course\/section\//] }.compact
ap links.map{|x| x.uri.to_s[/\w+.+course\/section\//] }
ap links.map{|x| x.uri.to_s[/\w+.+course\/section/] }
ap links.map{|x| x.uri.to_s[/\w+.+course\/section\/] }
ap links.map{|x| x.uri.to_s[/\w+.+course\/section\d+/] }
ap links.map{|x| x.uri.to_s[/\w+.+course\/section/\d+] }
ap links.map{|x| x.uri.to_s[/\w+.+course\/section/] }
ap links.map{|x| x.uri.to_s }
ap links.map{|x| x.uri }
ap links.map{|x| x.uri. }
ap links.map{|x| x.uri.to_s }
ap links.map{|x| x.uri}
links.map{|x| x.uri}
links
ap links.map{|x| x.to_s }
links.map{|x| x.to_s }
links.map{|x| x.to_s}
links
link
ap links = links.links.reject{|x| x.class.eql?(URI::Generic) }
ap links.links.map{|x| x.uri }
ap links.links.map{|x| x.uri.component }
ap links.links.map{|x| x.uri.methods }
ap links.links.map{|x| x.uri.value }
ap links.links.map{|x| x.uri }
links.links.map{|x| x.uri }
links.links.map{|x| x.to_s }
links.links
links = mechanize.get link
link
linkk
 c
mechanize.post link
mechanize = self.mechanize
mechanize = self.mechanize.get link
link
 c
c
link
c
self.course_lists
self.course
c
 c
c
self.course_lists.to_a[0][1][0].include?(choice)
self.course_lists.to_a[0][1][0]
self.course_lists.to_a[0][1]
self.course_lists.to_a[0][1].map{|x| x.include?(choice) }
self.course_lists.to_a[0][1].map{|x| x.include?(choice)}
self.course_lists.to_a[0][1]
self.course_lists.to_a[0][1].include?(choice)
choice
self.course_lists.to_a[1][1]
self.course_lists.to_a[1][0]
self.course_lists.to_a[1]
self.course_lists.to_a[2]
self.course_lists.to_a
self.course_lists[2]
self.course_lists
choice
choice.strip!
choice.strip
choice
v
ap self.course_lists.map{|k,v| }
self.course_lists.map{|k,v| v}
self.course_lists
c
self.course_lists
self.course_listed
self.course
course_listed
course
cource
couse
c
choice
c
ap course.map{|k,v| v.each_index.include?(choice) }c
ap course.map{|k,v| v }
ap course.map{|k,v| v.each_index.include?(choice) }
ap course.map{|k,v| v.each_index.inclunde?(choice) }
ap course.map{|k,v| v.each_index.inclue?(choice) }
ap course.map{|k,v| v.each_include }
ap course.map{|k,v| v }
course.map{|k,v| v }
course.map{|k,v| k[0] }
course.map{|k,v| k[v] }
course.map{|k,v| choice.in?(v) }
course.map{|k,v| v }
course.map{|k,v| v.map{|x| x.include?(choice) ? x : 'not'}.class }
course.map{|k,v| v.map{|x| x.include?(choice) ? x : 'not'} }
course.map{|k,v| v.map{|x| x.include?(choice) ? x : 'not'}.class }
course.to_a[0]
course.to_a[0][1]
course.to_a[0]
course.to_a
course.class.to_a
course.class
course
course[2]
course.map{|k,v| v.map{|x| x.include?(choice) ? x : 'not'}.class }
course.map{|k,v| v.map{|x| x.include?(choice) ? x : 'not'}.include?(true) }
course.map{|k,v| v.map{|x| x.include?(choice) ? x : 'not'} }
course.map{|k,v| v.map{|x| x.include?(choice)} }
course.map{|k,v| v.map{|x| x[0].include?(choice)} }
course.map{|k,v| v.map{|x| x.include?(choice)} }
course.map{|k,v| v.map{|x| .include?(choice)} }
course.map{|k,v| v.include?(choice)}
course.map{|k,v| v.inlucde?(choice)}
course
choice
c
ap course_listed = course.map{|k,v| v[0][/[\s][A-Za-z]+\s\w+.\w+/]}
c
ap course_listed = course.map{|k,v| v[0][/[\s][A-Za-z]+\s\w+.\w+/]}
ap course_listed = course.map{|k,v| v[0][/[\s][A-Za-z]+\s\w+.\w/]}
ap course_listed = course.map{|k,v| v[0][/[\s][A-Za-z]+\s\w+.+\w/]}
ap course_listed = course.map{|k,v| v[0][/[\s][A-Za-z]+\s\w+.+/]}
course_listed = course.map{|k,v| v[0][/[\s][A-Za-z]+\s\w+.+/]}
course_listed = course.map{|k,v| v[0][/[\s][A-Za-z]+\s\w+.+\s$/]}
course_listed = course.map{|k,v| v[0][/[\s][A-Za-z]+\s\w+.\s$/]}
course_listed = course.map{|k,v| v[0][/[\s][A-Za-z]+\s\w+\s$/]}
course_listed = course.map{|k,v| v[0][/[\s][A-Za-z]+\s\w+.\s$/]}
course_listed = course.map{|k,v| v[0][/[\s][A-Za-z]+\s\w+.+\s$/]}
course_listed = course.map{|k,v| v[0][/[\s][A-Za-z]+\s\w+.+\w$/]}
course_listed = course.map{|k,v| v[0][/[\s][A-Za-z]+\s\w+.+\w\s$/]}
course_listed = course.map{|k,v| v[0][/[\s][A-Za-z]+\s\w+.+\w/]}
course_listed = course.map{|k,v| v[0][/[\s][A-Za-z]+\s\w+.+\s/]}
self.prompt.select("choice course to attent", course_listed)
course_listed = course.map{|k,v| v[0][/[\s][A-Za-z]+\s\w+/]}
ap course.map{|k,v| v[0][/[\s][A-Za-z]+\s\w+/] }
ap course.map{|k,v| v[0][/[\s][A-Za-z]+\s\w/] }
ap course.map{|k,v| v[0][/[\s][A-Za-z]+\s/] }
ap course.map{|k,v| v[0][/[\s][A-Za-z]+\s+/] }
ap course.map{|k,v| v[0][/[\s][A-Za-z]+.+\s/] }
